#!/usr/bin/env node
const argv = require("yargs")
  .usage("Usage: \n   $0 <targetFile> [options] | $0 -i <sourceDir> -o <outDir>")
  .example("$0 foo.pdf", "chunk pdf file and stdout")
  .example(
    "$0 -i ./{path_to_input_dir} -o ./{path_to_output_dir}",
    "batch convert in input_dir"
  )

  .alias("o", "out")
  .describe("o", "Out dir")

  .alias("i", "in")
  .describe("i", "input dir")

  .alias("z", "zoom")
  .describe("z", "Zoom scale (default is 1)")

  .alias("c", "chunk")
  .describe("c", "Chunk size (default is 2)")

  .help("h")
  .alias("h", "help").argv;

const fs = require("fs");
const path = require("path");
const { Readable } = require("stream");
const createChunkedPdf = require("./src/createChunkedPdf");

const parseArgv = () => {
  const sourcePdfPath = argv._[0];

  if (!sourcePdfPath && (!argv.in || !argv.out)) {
    throw Error('You must set -i and -o options when you use multi file mode.')
  }

  return {
    mode: argv._[0] ? "single" : "multi",
    sourcePdfPath,
    sourceDir: argv.in,
    outDir: argv.out,
    zoomScale: argv.zoom,
    chunkSize: argv.chunk,
  };
};

const setupParams = () => {
  const DEFAULT_ZOOM_SCALE = 1;
  const DEFAULT_CHUNKSIZE = 2;

  const {
    mode,
    sourcePdfPath,
    sourceDir,
    outDir,
    zoomScale,
    chunkSize,
  } = parseArgv();

  return {
    mode,
    sourcePdfPath,
    sourceDir,
    outDir,
    zoomScale: zoomScale ? zoomScale : DEFAULT_ZOOM_SCALE,
    chunkSize: chunkSize ? chunkSize : DEFAULT_CHUNKSIZE,
  };
};

// ---

const main = async () => {
  const {
    mode,
    sourcePdfPath,
    sourceDir,
    outDir,
    zoomScale,
    chunkSize,
  } = setupParams();

  if (mode === "single") {
    const existingPdfBytes = fs.readFileSync(sourcePdfPath);
    const outPdfBytes = await createChunkedPdf(
      existingPdfBytes,
      chunkSize,
      zoomScale
    );

    const readable = new Readable();
    readable._read = () => {};
    readable.push(outPdfBytes);
    readable.pipe(process.stdout);
  } else if (mode === "multi") {
    const directoryPath = path.join(__dirname, sourceDir);
    const filenames = fs.readdirSync(directoryPath).filter(f => path.extname(f) === '.pdf')

    for await (const filename of filenames) {

      const existingPdfBytes = fs.readFileSync(path.join(directoryPath, filename));

      const outPdfBytes = await createChunkedPdf(
        existingPdfBytes,
        chunkSize,
        zoomScale
      );
      if (!fs.existsSync(outDir)) {
        fs.mkdirSync(path.join(__dirname, outDir))
      }
      fs.writeFileSync(path.join(__dirname, outDir, filename), outPdfBytes)
    }
  }
};

main().catch(console.log);
